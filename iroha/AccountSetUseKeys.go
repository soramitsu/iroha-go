// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AccountSetUseKeys struct {
	_tab flatbuffers.Table
}

func GetRootAsAccountSetUseKeys(buf []byte, offset flatbuffers.UOffsetT) *AccountSetUseKeys {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccountSetUseKeys{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccountSetUseKeys) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccountSetUseKeys) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccountSetUseKeys) Accounts(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountSetUseKeys) AccountsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AccountSetUseKeys) UseKeys() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountSetUseKeys) MutateUseKeys(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func AccountSetUseKeysStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AccountSetUseKeysAddAccounts(builder *flatbuffers.Builder, accounts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(accounts), 0)
}
func AccountSetUseKeysStartAccountsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountSetUseKeysAddUseKeys(builder *flatbuffers.Builder, useKeys uint16) {
	builder.PrependUint16Slot(1, useKeys, 0)
}
func AccountSetUseKeysEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
