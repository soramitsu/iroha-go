// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

//////////////////////////////////////////
/// Commands for meta Asset
type AssetCreate struct {
	_tab flatbuffers.Table
}

func GetRootAsAssetCreate(buf []byte, offset flatbuffers.UOffsetT) *AssetCreate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AssetCreate{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AssetCreate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AssetCreate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AssetCreate) AssetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AssetCreate) DomainName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AssetCreate) LedgerName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AssetCreate) Amount() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AssetCreate) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AssetCreateStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AssetCreateAddAssetName(builder *flatbuffers.Builder, assetName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(assetName), 0)
}
func AssetCreateAddDomainName(builder *flatbuffers.Builder, domainName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(domainName), 0)
}
func AssetCreateAddLedgerName(builder *flatbuffers.Builder, ledgerName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ledgerName), 0)
}
func AssetCreateAddAmount(builder *flatbuffers.Builder, amount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(amount), 0)
}
func AssetCreateAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(description), 0)
}
func AssetCreateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
