// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AccountPermissionAsset struct {
	_tab flatbuffers.Table
}

func GetRootAsAccountPermissionAsset(buf []byte, offset flatbuffers.UOffsetT) *AccountPermissionAsset {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccountPermissionAsset{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccountPermissionAsset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccountPermissionAsset) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccountPermissionAsset) AssetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccountPermissionAsset) DomainName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccountPermissionAsset) LedgerName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccountPermissionAsset) AccountGivePermission() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionAsset) MutateAccountGivePermission(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *AccountPermissionAsset) Transfer() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionAsset) MutateTransfer(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *AccountPermissionAsset) Add() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionAsset) MutateAdd(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *AccountPermissionAsset) Subtract() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionAsset) MutateSubtract(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func (rcv *AccountPermissionAsset) Read() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionAsset) MutateRead(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func AccountPermissionAssetStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func AccountPermissionAssetAddAssetName(builder *flatbuffers.Builder, assetName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(assetName), 0)
}
func AccountPermissionAssetAddDomainName(builder *flatbuffers.Builder, domainName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(domainName), 0)
}
func AccountPermissionAssetAddLedgerName(builder *flatbuffers.Builder, ledgerName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ledgerName), 0)
}
func AccountPermissionAssetAddAccountGivePermission(builder *flatbuffers.Builder, accountGivePermission byte) {
	builder.PrependByteSlot(3, accountGivePermission, 0)
}
func AccountPermissionAssetAddTransfer(builder *flatbuffers.Builder, transfer byte) {
	builder.PrependByteSlot(4, transfer, 0)
}
func AccountPermissionAssetAddAdd(builder *flatbuffers.Builder, add byte) {
	builder.PrependByteSlot(5, add, 0)
}
func AccountPermissionAssetAddSubtract(builder *flatbuffers.Builder, subtract byte) {
	builder.PrependByteSlot(6, subtract, 0)
}
func AccountPermissionAssetAddRead(builder *flatbuffers.Builder, read byte) {
	builder.PrependByteSlot(7, read, 0)
}
func AccountPermissionAssetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
