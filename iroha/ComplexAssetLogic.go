// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ComplexAssetLogic struct {
	_tab flatbuffers.Table
}

func GetRootAsComplexAssetLogic(buf []byte, offset flatbuffers.UOffsetT) *ComplexAssetLogic {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ComplexAssetLogic{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ComplexAssetLogic) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ComplexAssetLogic) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ComplexAssetLogic) Add(obj *Chaincode) *Chaincode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Chaincode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ComplexAssetLogic) Subtract(obj *Chaincode) *Chaincode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Chaincode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ComplexAssetLogic) Transfer(obj *Chaincode) *Chaincode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Chaincode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ComplexAssetLogicStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ComplexAssetLogicAddAdd(builder *flatbuffers.Builder, add flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(add), 0)
}
func ComplexAssetLogicAddSubtract(builder *flatbuffers.Builder, subtract flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(subtract), 0)
}
func ComplexAssetLogicAddTransfer(builder *flatbuffers.Builder, transfer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(transfer), 0)
}
func ComplexAssetLogicEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
