// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/////////////////////////////////////
/// Permissions
type AccountPermissionRoot struct {
	_tab flatbuffers.Table
}

func GetRootAsAccountPermissionRoot(buf []byte, offset flatbuffers.UOffsetT) *AccountPermissionRoot {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccountPermissionRoot{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccountPermissionRoot) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccountPermissionRoot) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccountPermissionRoot) LedgerAdd() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionRoot) MutateLedgerAdd(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *AccountPermissionRoot) LedgerRemove() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionRoot) MutateLedgerRemove(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func AccountPermissionRootStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AccountPermissionRootAddLedgerAdd(builder *flatbuffers.Builder, ledgerAdd byte) {
	builder.PrependByteSlot(0, ledgerAdd, 0)
}
func AccountPermissionRootAddLedgerRemove(builder *flatbuffers.Builder, ledgerRemove byte) {
	builder.PrependByteSlot(1, ledgerRemove, 0)
}
func AccountPermissionRootEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
