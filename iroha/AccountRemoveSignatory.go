// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AccountRemoveSignatory struct {
	_tab flatbuffers.Table
}

func GetRootAsAccountRemoveSignatory(buf []byte, offset flatbuffers.UOffsetT) *AccountRemoveSignatory {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccountRemoveSignatory{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccountRemoveSignatory) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccountRemoveSignatory) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccountRemoveSignatory) Account() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccountRemoveSignatory) Signatory(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountRemoveSignatory) SignatoryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func AccountRemoveSignatoryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AccountRemoveSignatoryAddAccount(builder *flatbuffers.Builder, account flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(account), 0)
}
func AccountRemoveSignatoryAddSignatory(builder *flatbuffers.Builder, signatory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(signatory), 0)
}
func AccountRemoveSignatoryStartSignatoryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountRemoveSignatoryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
