// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AccountPermissionDomain struct {
	_tab flatbuffers.Table
}

func GetRootAsAccountPermissionDomain(buf []byte, offset flatbuffers.UOffsetT) *AccountPermissionDomain {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccountPermissionDomain{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccountPermissionDomain) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccountPermissionDomain) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccountPermissionDomain) DomainName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccountPermissionDomain) LedgerName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccountPermissionDomain) AccountGivePermission() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionDomain) MutateAccountGivePermission(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *AccountPermissionDomain) AccountAdd() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionDomain) MutateAccountAdd(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *AccountPermissionDomain) AccountRemove() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionDomain) MutateAccountRemove(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *AccountPermissionDomain) AssetCreate() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionDomain) MutateAssetCreate(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *AccountPermissionDomain) AssetRemove() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionDomain) MutateAssetRemove(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func (rcv *AccountPermissionDomain) AssetUpdate() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionDomain) MutateAssetUpdate(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func AccountPermissionDomainStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func AccountPermissionDomainAddDomainName(builder *flatbuffers.Builder, domainName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(domainName), 0)
}
func AccountPermissionDomainAddLedgerName(builder *flatbuffers.Builder, ledgerName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ledgerName), 0)
}
func AccountPermissionDomainAddAccountGivePermission(builder *flatbuffers.Builder, accountGivePermission byte) {
	builder.PrependByteSlot(2, accountGivePermission, 0)
}
func AccountPermissionDomainAddAccountAdd(builder *flatbuffers.Builder, accountAdd byte) {
	builder.PrependByteSlot(3, accountAdd, 0)
}
func AccountPermissionDomainAddAccountRemove(builder *flatbuffers.Builder, accountRemove byte) {
	builder.PrependByteSlot(4, accountRemove, 0)
}
func AccountPermissionDomainAddAssetCreate(builder *flatbuffers.Builder, assetCreate byte) {
	builder.PrependByteSlot(5, assetCreate, 0)
}
func AccountPermissionDomainAddAssetRemove(builder *flatbuffers.Builder, assetRemove byte) {
	builder.PrependByteSlot(6, assetRemove, 0)
}
func AccountPermissionDomainAddAssetUpdate(builder *flatbuffers.Builder, assetUpdate byte) {
	builder.PrependByteSlot(7, assetUpdate, 0)
}
func AccountPermissionDomainEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
