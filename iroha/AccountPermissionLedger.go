// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AccountPermissionLedger struct {
	_tab flatbuffers.Table
}

func GetRootAsAccountPermissionLedger(buf []byte, offset flatbuffers.UOffsetT) *AccountPermissionLedger {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccountPermissionLedger{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccountPermissionLedger) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccountPermissionLedger) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccountPermissionLedger) LedgerName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccountPermissionLedger) DomainAdd() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionLedger) MutateDomainAdd(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *AccountPermissionLedger) DomainRemove() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionLedger) MutateDomainRemove(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *AccountPermissionLedger) PeerRead() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionLedger) MutatePeerRead(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *AccountPermissionLedger) PeerWrite() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionLedger) MutatePeerWrite(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *AccountPermissionLedger) AccountAdd() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionLedger) MutateAccountAdd(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *AccountPermissionLedger) AccountRemove() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionLedger) MutateAccountRemove(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func (rcv *AccountPermissionLedger) AccountGivePermission() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccountPermissionLedger) MutateAccountGivePermission(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func AccountPermissionLedgerStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func AccountPermissionLedgerAddLedgerName(builder *flatbuffers.Builder, ledgerName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ledgerName), 0)
}
func AccountPermissionLedgerAddDomainAdd(builder *flatbuffers.Builder, domainAdd byte) {
	builder.PrependByteSlot(1, domainAdd, 0)
}
func AccountPermissionLedgerAddDomainRemove(builder *flatbuffers.Builder, domainRemove byte) {
	builder.PrependByteSlot(2, domainRemove, 0)
}
func AccountPermissionLedgerAddPeerRead(builder *flatbuffers.Builder, peerRead byte) {
	builder.PrependByteSlot(3, peerRead, 0)
}
func AccountPermissionLedgerAddPeerWrite(builder *flatbuffers.Builder, peerWrite byte) {
	builder.PrependByteSlot(4, peerWrite, 0)
}
func AccountPermissionLedgerAddAccountAdd(builder *flatbuffers.Builder, accountAdd byte) {
	builder.PrependByteSlot(5, accountAdd, 0)
}
func AccountPermissionLedgerAddAccountRemove(builder *flatbuffers.Builder, accountRemove byte) {
	builder.PrependByteSlot(6, accountRemove, 0)
}
func AccountPermissionLedgerAddAccountGivePermission(builder *flatbuffers.Builder, accountGivePermission byte) {
	builder.PrependByteSlot(7, accountGivePermission, 0)
}
func AccountPermissionLedgerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
