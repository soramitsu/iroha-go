// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ComplexAsset struct {
	_tab flatbuffers.Table
}

func GetRootAsComplexAsset(buf []byte, offset flatbuffers.UOffsetT) *ComplexAsset {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ComplexAsset{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ComplexAsset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ComplexAsset) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ComplexAsset) AssetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ComplexAsset) DomainName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ComplexAsset) LedgerName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ComplexAsset) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ComplexAsset) Prop(obj *KeyValueObject, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ComplexAsset) PropLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ComplexAsset) Logic(obj *ComplexAssetLogic) *ComplexAssetLogic {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ComplexAssetLogic)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ComplexAssetStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ComplexAssetAddAssetName(builder *flatbuffers.Builder, assetName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(assetName), 0)
}
func ComplexAssetAddDomainName(builder *flatbuffers.Builder, domainName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(domainName), 0)
}
func ComplexAssetAddLedgerName(builder *flatbuffers.Builder, ledgerName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ledgerName), 0)
}
func ComplexAssetAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(description), 0)
}
func ComplexAssetAddProp(builder *flatbuffers.Builder, prop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(prop), 0)
}
func ComplexAssetStartPropVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ComplexAssetAddLogic(builder *flatbuffers.Builder, logic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(logic), 0)
}
func ComplexAssetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
