// automatically generated by the FlatBuffers compiler, do not modify

package iroha

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

//////////////////////////////////////////
//////////////////////////////////////////
/// Commands for Peer
type PeerAdd struct {
	_tab flatbuffers.Table
}

func GetRootAsPeerAdd(buf []byte, offset flatbuffers.UOffsetT) *PeerAdd {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PeerAdd{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PeerAdd) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PeerAdd) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PeerAdd) Peer(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *PeerAdd) PeerLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PeerAdd) PeerBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PeerAddStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PeerAddAddPeer(builder *flatbuffers.Builder, peer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(peer), 0)
}
func PeerAddStartPeerVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PeerAddEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
