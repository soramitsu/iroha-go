// automatically generated by the FlatBuffers compiler, do not modify

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Peer struct {
	_tab flatbuffers.Table
}

func GetRootAsPeer(buf []byte, offset flatbuffers.UOffsetT) *Peer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Peer{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Peer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Peer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Peer) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Peer) Uuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Peer) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Peer) Trust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Peer) MutateTrust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *Peer) State() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Peer) MutateState(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func PeerStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func PeerAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ip), 0)
}
func PeerAddUuid(builder *flatbuffers.Builder, uuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(uuid), 0)
}
func PeerAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func PeerAddTrust(builder *flatbuffers.Builder, trust float64) {
	builder.PrependFloat64Slot(3, trust, 0.0)
}
func PeerAddState(builder *flatbuffers.Builder, state byte) {
	builder.PrependByteSlot(4, state, 0)
}
func PeerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
