// automatically generated by the FlatBuffers compiler, do not modify

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DomainSetPermission struct {
	_tab flatbuffers.Table
}

func GetRootAsDomainSetPermission(buf []byte, offset flatbuffers.UOffsetT) *DomainSetPermission {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DomainSetPermission{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DomainSetPermission) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DomainSetPermission) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DomainSetPermission) Domain() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DomainSetPermission) TargetAccount() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DomainSetPermission) Permission(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *DomainSetPermission) PermissionLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DomainSetPermission) PermissionBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DomainSetPermissionStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DomainSetPermissionAddDomain(builder *flatbuffers.Builder, domain flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(domain), 0)
}
func DomainSetPermissionAddTargetAccount(builder *flatbuffers.Builder, targetAccount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(targetAccount), 0)
}
func DomainSetPermissionAddPermission(builder *flatbuffers.Builder, permission flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(permission), 0)
}
func DomainSetPermissionStartPermissionVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func DomainSetPermissionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
