// automatically generated by the FlatBuffers compiler, do not modify

package protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Exchange struct {
	_tab flatbuffers.Table
}

func GetRootAsExchange(buf []byte, offset flatbuffers.UOffsetT) *Exchange {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Exchange{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Exchange) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Exchange) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Exchange) SenderAccount() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Exchange) ReceiverAccount() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Exchange) SenderAsset(obj *Asset) *Asset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Asset)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Exchange) ReceiverAsset(obj *Asset) *Asset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Asset)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ExchangeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ExchangeAddSenderAccount(builder *flatbuffers.Builder, senderAccount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(senderAccount), 0)
}
func ExchangeAddReceiverAccount(builder *flatbuffers.Builder, receiverAccount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(receiverAccount), 0)
}
func ExchangeAddSenderAsset(builder *flatbuffers.Builder, senderAsset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(senderAsset), 0)
}
func ExchangeAddReceiverAsset(builder *flatbuffers.Builder, receiverAsset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(receiverAsset), 0)
}
func ExchangeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
