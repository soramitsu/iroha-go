//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: endpoint

package protocol

import "github.com/google/flatbuffers/go"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Client API for ClientService service
type ClientServiceClient interface{
  Torii(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* SumeragiResponse, error)  
}

type clientServiceClient struct {
  cc *grpc.ClientConn
}

func NewClientServiceClient(cc *grpc.ClientConn) ClientServiceClient {
  return &clientServiceClient{cc}
}

func (c *clientServiceClient) Torii(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* SumeragiResponse, error) {
  out := new(SumeragiResponse)
  err := grpc.Invoke(ctx, "/protocol.ClientService/Torii", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for ClientService service
type ClientServiceServer interface {
  Torii(context.Context, *Transaction) (*flatbuffers.Builder, error)  
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
  s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_Torii_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(Transaction)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(ClientServiceServer).Torii(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/protocol.ClientService/Torii",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(ClientServiceServer).Torii(ctx, req.(* Transaction))
  }
  return interceptor(ctx, in, info, handler)
}


var _ClientService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "protocol.ClientService",
  HandlerType: (*ClientServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Torii",
      Handler: _ClientService_Torii_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

